{
  "rulesDirectory": [
    "../node_modules/tslint-consistent-codestyle"
  ],
  "extends": [
    "tslint-consistent-codestyle"
  ],
  "rules": {
    "const-parameters": false,
    "early-exit": false,
    "ext-curly": false, //already enforced by native "curly,
    "no-as-type-assertion": false,
    "no-accessor-recursion": true,
    "no-collapsible-if": false,
    "no-else-after-return": false,
    "no-return-undefined": true,
    "no-static-this": true,
    "no-unnecessary-else": false,
    "no-unnecessary-type-annotation": false,
    "no-unused": true, //this could be done via noUnusedLocals in tsconfig.json but we don't want the buid, to brake for unused stuff while developing,
    "no-var-before-return": true,
    "object-shorthand-properties-first": false,
    "parameter-properties": false,
    "prefer-const-enum": true,
    "prefer-while": true,
    "naming-convention": [
      true,
      // forbid leading and trailing underscores and enforce strictCamelCase on EVERY name. will be overridden by subtypes if needed
      {
        "type": "default",
        "format": "strictCamelCase",
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      // require all global constants to be strictCamelCase or UPPER_CASE
      // all other variables and functions still need to be strictCamelCase
      {
        "type": "variable",
        "modifiers": ["global", "const"],
        "format": ["strictCamelCase", "UPPER_CASE"]
      },
      // override the above format option for exported constants to allow only UPPER_CASE
      {
        "type": "variable",
        "modifiers": ["export", "const"],
        "format": ["strictCamelCase", "UPPER_CASE"]
      },
      // require exported constant variables that are initialized with functions to be strictCamelCase
      {
        "type": "functionVariable",
        "modifiers": ["export", "const"],
        "format": "strictCamelCase"
      },
      // forbid leading underscores for unused parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
      // all other rules (trailingUnderscore: forbid, format: strictCamelCase) still apply
      {
        "type": "parameter",
        "modifiers": "unused",
        "leadingUnderscore": "forbid"
      },
      // require leading underscores for private properties and methods, all other rules still apply
      {
        "type": "member",
        "modifiers": "private",
        "leadingUnderscore": "require"
      },
      // same for protected
      {
        "type": "member",
        "modifiers": "protected",
        "leadingUnderscore": "require"
      },
      // exclicitly disable the format check only for method toJSON
      {
        "type": "method",
        "filter": "^toJSON$",
        "format": null
      },
      // enforce UPPER_CASE for all public static readonly(!) properties
      {
        "type": "property",
        "modifiers": ["public", "static", "const"],
        "format": "UPPER_CASE"
      },
      // enforce StrictPascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {
        "type": "type",
        "format": "StrictPascalCase"
      },
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid StrictPascalCase
      {
        "type": "class",
        "modifiers": "abstract",
        "prefix": "Abstract"
      },
      // interface names must start with "I". The following part of the name must be valid StrictPascalCase
      {
        "type": "interface",
        "prefix": "I"
      },
      // generic type parameters must start with "T"
      // most of the time it will only be T, which is totally valid, because an empty string conforms to the StrictPascalCase check
      // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
      {
        "type": "genericTypeParameter",
        "prefix": "T"
      },
      // enum members must be in StrictPascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {
        "type": "enumMember",
        "format": "StrictPascalCase"
      }
    ]
  }
}
